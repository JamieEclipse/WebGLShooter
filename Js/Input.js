//Provides a unified interface for mobile and desktop input.
"use strict"

function Input(game)
{
	//Store reference to game
	this.game = game;
	
	//Keycode to action mapping	
	this.keyBindings = { };
	
	//Action values generated by the keyboard
	this.keyboardActions = { };
	
	//Action values generated by HTML elements
	this.uiActions = { };
	
	//Get element to receive input from
	var doc = document.querySelector("body");
	doc.addEventListener("keydown", this.OnKeyboardInput.bind(this, true));
	doc.addEventListener("keyup", this.OnKeyboardInput.bind(this, false));
	
	//Mouse input
	this.rawMousePosition = vec2.create();
	this.mousePosition = vec2.create();
	this.mouseDelta = vec2.create();
	$("body").mousemove(this.OnMouseMove.bind(this));
	
	//Touch input
	this.rawTouchPosition = vec2.create();
	this.touchPosition = vec2.create();
	this.touchDelta = vec2.create();
	game.window.bind("touchmove", this.OnTouchMove.bind(this));
	$("body").bind("touchbegin", this.OnTouchBegin.bind(this));
	$("body").bind("touchend", this.OnTouchEnd.bind(this));
}


//Maintain stable mouse/touch deltas
Input.prototype.Update = function(deltaTime)
{
	vec2.subtract(this.touchDelta, this.rawTouchPosition, this.touchPosition);
	this.touchPosition = vec2.clone(this.rawTouchPosition);
	
	vec2.subtract(this.mouseDelta, this.rawMousePosition, this.mousePosition);
	this.mousePosition = vec2.clone(this.rawMousePosition);
}


//TODO: Rename? "Action" sounds like an event rather than state.
Input.prototype.GetActionValue = function(name)
{
	if((name in this.keyboardActions) && this.keyboardActions[name])
	{
		return true;
	}
	
	if((name in this.uiActions) && this.uiActions[name])
	{
		return true;
	}
	
	return false;
}


//Set the current state of an input action
Input.prototype.OnKeyboardInput = function(down)
{
	var inputAction = this.keyBindings[event.keyCode];
	if(inputAction != undefined)
	{
		this.keyboardActions[inputAction] = down;
	}
}


//Associates a html element with an action
Input.prototype.BindElement = function(button, action)
{
	button.bind("touchstart", function()
	{
		this.uiActions[action] = true;
	}.bind(this));
	button.bind("touchend", function()
	{
		this.uiActions[action] = false;
	}.bind(this));
}


//Bind an array of key codes to one "action" string
Input.prototype.BindKeys = function(keyCodes, action)
{
	for(var i = 0; i < keyCodes.length; ++i)
	{
		this.keyBindings[keyCodes[i]] = action;
	}
}


Input.prototype.OnMouseMove = function(event)
{
	this.rawMousePosition = vec2.fromValues(clientX, clientY);
	event.preventDefault();
}


//Shows or hides all touchscreen UI (keyboard replacements)
Input.prototype.SetTouchEnabled = function(enabled)
{
	var buttons = $(".uiButton");
	if(enabled && !this.game.suspended)
	{
		buttons.show();
	}
	else
	{
		buttons.hide();
	}
}


Input.prototype.OnTouchBegin = function(event)
{
	//this.touchPosition = undefined;
	
	//Enable touch input on first touch
	this.SetTouchEnabled(true);
	
	if(!this.game.suspended)
	{
		event.preventDefault();
	}
}


Input.prototype.OnTouchEnd = function(event)
{
	//this.touchPosition = undefined;
	
	if(!this.game.suspended)
	{
		event.preventDefault();
	}
}


Input.prototype.OnTouchMove = function(event)
{
	var touch = event.touches.item(0);
	this.rawTouchPosition = vec2.fromValues(touch.clientX, touch.clientY);
	event.preventDefault();
}
    